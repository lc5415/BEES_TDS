res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+scale_x_discrete(limits = c(0, 0.001))
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+scale_x_discrete(limits = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_discrete(breaks = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_discrete(breaks = c(0, 0.001), labels = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_discrete(breaks = c("0", "0.001"), labels = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_discrete(breaks = c("0", "0.001"), labels = c("0", "0.001"))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
xlim("0", "0.001")+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_continuous(breaks = c("0", "0.001"), labels = c("0", "0.001"))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_continuous(breaks = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_continuous(breaks = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
scale_x_continuous(limits = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
# scale_x_continuous(limits = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
res.all = read.csv("Results/ResolutionTrainingImages.csv")
res.all = res.all[,-1]
colnames(res.all) = c("# of height pixels", "# of width pixels")
scatt = res.all %>% ggplot(aes(`# of height pixels`, `# of width pixels`))+geom_point(alpha = 0.3)+theme_minimal()+
scale_color_brewer(palette = "Paired")+geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
geom_hline(yintercept = mean(res.all$`# of width pixels`), linetype = 2)+
theme(text=element_text(size=21))
hist1 = res.all %>% ggplot(aes(`# of height pixels`))+geom_density()+theme_minimal()+scale_color_brewer(palette = "Paired")+
geom_vline(xintercept = mean(res.all$`# of height pixels`), linetype = 2)+
theme(text=element_text(size=21), axis.title.x = element_blank(), axis.text.x = element_blank())
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
# scale_x_continuous(limits = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+scale_y_continuous()limits = c(0,0.001)+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+scale_y_continuous(limits = c(0,0.001))+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
# scale_x_continuous(limits = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+scale_y_continuous(breaks = c(0,0.001), labels = waiver())+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
# scale_x_continuous(limits = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
hist2 = res.all %>% ggplot(aes(`# of width pixels`))+geom_density()+geom_vline(xintercept = mean(res.all$`# of width pixels`), linetype = 2)+scale_y_continuous(breaks = c(0,0.0015), labels = waiver())+coord_flip()+theme_minimal()+scale_color_brewer(palette = "Paired")+
# scale_x_continuous(limits = c(0, 0.001))+
theme(text=element_text(size=21), axis.title.y = element_blank(), axis.text.y = element_blank())
fig = ggarrange(hist1, NULL, scatt, hist2, nrow = 2, ncol = 2, widths = c(2,1), heights = c(1,2), align = "hv")
annotate_figure(fig, top = text_grob("Distribution of image resolution in training set", face="bold", size = 14))
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
geom_line(color = colorChosen)+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()+
scale_color_brewer(palette = "Paired")
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = colorChosen))+
geom_line(color = colorChosen)+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()+
scale_color_brewer(palette = "Paired")
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
geom_line(color = colorChosen)+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
geom_line(color = colorChosen)+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()+scale_color_manual(values = 0.001)
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
geom_line(color = colorChosen)+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+labs(x = "Learning rate", y = "Loss - MAE", color = "Legend")+
annotation_logticks(sides="b")+theme_minimal()+scale_color_manual(values = 0.001)
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
# optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
#   geom_line(color = colorChosen)+
#   scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
#               labels = trans_format("log10", math_format(10^.x)),
#               minor_breaks = minor_breaks)+labs(x = "Learning rate", y = "Loss - MAE", color = "Legend")+
#   annotation_logticks(sides="b")+theme_minimal()
optiRes %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
geom_line(aes(color = ifelse(Lambda==0.001, colorChosen, "gray")))+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()+
scale_color_brewer(palette = "Paired")+
theme(text=element_text(size=21))
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
# optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
#   geom_line(color = colorChosen)+
#   scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
#               labels = trans_format("log10", math_format(10^.x)),
#               minor_breaks = minor_breaks)+labs(x = "Learning rate", y = "Loss - MAE", color = "Legend")+
#   annotation_logticks(sides="b")+theme_minimal()
optiRes %>% ggplot(aes(x = lr, y = loss, color = Lambda, alpha = ifelse(Lambda == 0.001, 1, 0.1)))+
geom_line()+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()+
scale_color_brewer(palette = "Paired")+
theme(text=element_text(size=21))
colorChosen = RColorBrewer::brewer.pal(4, "Paired")[3]
# optiRes %>% filter(Lambda == 0.001) %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
#   geom_line(color = colorChosen)+
#   scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
#               labels = trans_format("log10", math_format(10^.x)),
#               minor_breaks = minor_breaks)+labs(x = "Learning rate", y = "Loss - MAE", color = "Legend")+
#   annotation_logticks(sides="b")+theme_minimal()
optiRes %>% ggplot(aes(x = lr, y = loss, color = Lambda, alpha = ifelse(Lambda == 0.001, 1, 0.1)))+
geom_line()+scale_alpha(guide="none")+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()+
scale_color_brewer(palette = "Paired")+
theme(text=element_text(size=21))
CHALEOptiLR0 = read.csv("Results/0CHALEOptLR.csv") # no regularisation
CHALEOptiLR01 = read.csv("Results/01CHALEOptLR.csv")
CHALEOptiLR001 = read.csv("Results/001CHALEOptLR.csv")
CHALEOptiLR0001 = read.csv("Results/0001CHALEOptLR.csv")
CHALEOptiLR00001 = read.csv("Results/00001CHALEOptLR.csv")
minIter = 30
len = nrow(CHALEOptiLR0)
optiRes = rbind(cbind(CHALEOptiLR0[minIter:len,-1], Lambda = 0),
cbind(CHALEOptiLR01[minIter:len,-1], Lambda = 0.1),
cbind(CHALEOptiLR001[minIter:len,-1], Lambda = 0.01),
cbind(CHALEOptiLR0001[minIter:len,-1], Lambda = 0.001),
cbind(CHALEOptiLR00001[minIter:len,-1], Lambda = 0.0001))
optiRes$lr = 10^(optiRes$lr)
optiRes$Lambda = as.factor(optiRes$Lambda)
optiRes %>% ggplot(aes(x = lr, y = loss, color = Lambda))+
geom_line()+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)),
minor_breaks = minor_breaks)+
annotation_logticks(sides="b")+theme_minimal()+
scale_color_brewer(palette = "Paired")+
theme(text=element_text(size=21))
# max = 2*10^-1
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
LastTest = gender %>% summarise(LastValue = last(Test.loss))
LastTrain = gender %>% summarise(LastValue = last(Train.loss))
gender %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "MAE") %>%
ggplot(aes(x = Epoch, y = MAE))+
geom_path(aes(linetype = Loss), size = 1.5)+
ylim(0,60)+theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves with a 'Reduce On Plateau' LR schedule")+
geom_text(data = LastTest, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -6, vjust = -10, show.legend = F, size = 10, fontface = 2)+
geom_text(data = LastTrain, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -8, vjust = -7, show.legend = F, fontface = 1, size = 10)+
theme(text=element_text(size=21))
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
LastTest = gender %>% summarise(LastValue = last(Test.loss))
LastTrain = gender %>% summarise(LastValue = last(Train.loss))
gender %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "MAE") %>%
ggplot(aes(x = Epoch, y = MAE))+
geom_path(aes(linetype = Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves with a 'Reduce On Plateau' LR schedule")+
geom_text(data = LastTest, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -6, vjust = -10, show.legend = F, size = 10, fontface = 2)+
geom_text(data = LastTrain, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -8, vjust = -7, show.legend = F, fontface = 1, size = 10)+
theme(text=element_text(size=21))
View(gender)
View(gender)
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
LastTest = gender %>% summarise(LastValue = last(Test.loss))
LastTrain = gender %>% summarise(LastValue = last(Train.loss))
gender %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "MAE") %>%
ggplot(aes(x = Epoch, y = MAE))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves with a 'Reduce On Plateau' LR schedule")+
geom_text(data = LastTest, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -6, vjust = -10, show.legend = F, size = 10, fontface = 2)+
geom_text(data = LastTrain, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -8, vjust = -7, show.legend = F, fontface = 1, size = 10)+
theme(text=element_text(size=21))
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
LastTest = gender %>% summarise(LastValue = last(Test.loss))
LastTrain = gender %>% summarise(LastValue = last(Train.loss))
gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = NLL))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves with a 'Reduce On Plateau' LR schedule")+
geom_text(data = LastTest, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -6, vjust = -10, show.legend = F, size = 10, fontface = 2)+
geom_text(data = LastTrain, aes(x=-Inf, y = -Inf, label=round(LastValue,2)),
hjust= -8, vjust = -7, show.legend = F, fontface = 1, size = 10)+
theme(text=element_text(size=21))
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
LastTest = gender %>% summarise(LastValue = last(Test.loss))
LastTrain = gender %>% summarise(LastValue = last(Train.loss))
gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = NLL))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
gender$AccTest = gender$AccTest/2611
gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = NLL))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
gender$AccTest = gender$AccTest/2611
gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = NLL))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))+ylim(0,1)
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
gender$AccTest = gender$AccTest/2611
g1 = gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = NLL))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
g2 = gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))+ylim(0,1)
ggarrange(g1, g2, ncol = 2, align = "h")
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
gender$AccTest = gender$AccTest/2611
g1 = gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = NLL))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
g2 = gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))+ylim(0,1)
ggarrange(g1, g2, nrow = 2, align = "h")
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
gender$AccTest = gender$AccTest/2611
g1 = gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = log(NLL)))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
g2 = gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
ggarrange(g1, g2, nrow = 2, align = "h")
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
gender$AccTest = gender$AccTest/2611
g1 = gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = log10(NLL)))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
g2 = gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
ggarrange(g1, g2, nrow = 2, align = "h")
gender = read.csv("Results/GenderTrainTestLoss1.csv")
gender$X = gender$X+1
colnames(gender)[1] = "Epoch"
gender$AccTest = gender$AccTest/2611
g1 = gender[,-c(4,5)] %>% pivot_longer(-c(Epoch), names_to = "Loss", values_to = "NLL") %>%
ggplot(aes(x = Epoch, y = log10(-NLL)))+
geom_path(aes(color= Loss), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
g2 = gender[,-c(2,3)] %>% pivot_longer(-c(Epoch), names_to = "Type", values_to = "Accuracy") %>%
ggplot(aes(x = Epoch, y = Accuracy))+
geom_path(aes(color= Type), size = 1.5)+
theme_minimal()+
scale_color_brewer(palette = "Paired")+
ggtitle("Training curves for Gender")+
theme(text=element_text(size=21))
ggarrange(g1, g2, nrow = 2, align = "h")
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
colnames(X)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
best.lam = "lambda.1se"
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/LASSO_ENet.R', echo=TRUE)
knitr::opts_chunk$set(echo = FALSE)
if (!require(here)) install.packages("here")
library(here)
curr.dir = here()
knitr::opts_knit$set(root.dir = curr.dir)
plot(pressure)
curr.dir
