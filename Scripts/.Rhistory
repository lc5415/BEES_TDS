rm(list=ls())
library(devtools)
if (!require(mixOmics)) devtools::install_github("mixOmicsTeam/mixOmics")
library(sgPLS)
library(pheatmap)
library(ggplot2)
library(dplyr)
cluster = 0
if (cluster == 1){
save_data = data_folder = "../FULLDATA/preprocessed/"
save_plots = "../FULLResults/"
} else {
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
save_data = data_folder = "../data/preprocessed/"
save_plots = "../results/"
}
bio <- readRDS(paste0(data_folder,"bioImputed.rds"))
cov <- readRDS(paste0(data_folder,"covProcessed.rds"))
bio.cov <- merge(bio, cov['CVD_status'], by='row.names')#
bio.cov = select(bio.cov, -1)
X = as.data.frame(bio)
y = bio.cov$CVD_status
#Non-penalised plsda (i.e. no feature selection)
PLSDA <- plsda(X, y, ncomp=1, mode="regression")
#Sparse plsda model; keepX is number of parameters to keep. The final line returns the variables selected.
sPLSDA <- splsda(X, y, ncomp=1, mode='regression', keepX=5)
#Sourcing from Barbz code, this function performs 5-fold cross-validation to find which number of selected variables gives the lowest misclassification rate (of CVD status).
source("pls_functions.R")
set.seed(1)
res_splsda = CalibratesPLSDA(X,y, ncomp=1, Nrepeat=10)
splsda_calibration <- PlotCalib(res = res_splsda)
saveRDS(splsda_calibration, paste0(save_plots,"sPLSDA_calibration.rds"))
#Creating a heatmap of the selection of variables, over 100 iterations each selecting a different training/test set
set.seed(1)
Stability_results = StabilityPlot(X = X, Y = y, NIter = 100)
#List of biomarkers in order of groups (based on Fran's grouping): first 8 are liver, the next 10 are metabolic, next 2 immune, next 5 endocrine, and final 3 kidney. X_cuts defines these cuts.
groups_fran = c('Alanine.aminotransferase','Alkaline.phosphatase','Aspartate.aminotransferase','Direct.bilirubin','Gamma.glutamyltransferase','Total.bilirubin','Total.protein','Albumin','Apolipoprotein.A','Apolipoprotein.B','Cholesterol','Glucose','Glycated.haemoglobin.HbA1c.','HDL.cholesterol','LDL.direct','Lipoprotein.A','Triglycerides','Urate','C.reactive.protein','IGF.1','Calcium','Phosphate','SHBG','Testosterone','Vitamin.D','Creatinine','Cystatin.C','Urea')
X_fran = X[, groups_fran]
X_cuts_fran = c(8, 18, 20, 25)
#List of biomarkers in order of groups (based on paper's grouping): first 3 are liver, the next 4 are metabolic, next 2 immune, next 1 endocrine, and final 1 kidney (this grouping is the same but omitting some). X_cuts again defines the cuts.
groups_paper = c('Alanine.aminotransferase','Aspartate.aminotransferase','Gamma.glutamyltransferase','Cholesterol','Glycated.haemoglobin.HbA1c.','HDL.cholesterol','Triglycerides','C.reactive.protein','IGF.1','Testosterone','Creatinine')
X_paper = X[, groups_paper]
X_cuts_paper = c(3, 7, 9, 10)
#Making the gPLSDA model with fran's groupings. Group membership is set with ind.block.x. The number of groups to be selected by the model is defined by keepX.
gPLSDA <- gPLSda(X_fran, y, ncomp = 1,
ind.block.x = X_cuts_fran, keepX = 1)
gPLSDA$loadings$X
#Re-run with paper's groups:
gPLSDA <- gPLSda(X_paper, y, ncomp = 1,
ind.block.x = X_cuts_paper, keepX = 1)
gPLSDA$loadings$X
sgPLSDA <- sgPLSda(X_fran, y, ncomp = 1,
ind.block.x = X_cuts_fran, keepX = 1, alpha.x = 0.1)
sgPLSDA$loadings$X
#The two parameters of the sgPLS-DA model can be calibrated using the function CalibratesgPLSDA()
set.seed(1)
res_sgplsda = CalibratesgPLSDA(dataX = X_fran, dataY = y, ncomp = 1,
Nrepeat = 5, Xgroups = X_cuts_fran)
results = data.frame(rbind(
cbind(Biomarker = colnames(bio),
Model = 'sPLSDA',
Loadings = sPLSDA$loadings$X),
cbind(Biomarker = colnames(bio),
Model = 'sgPLSDA',
Loadings = sgPLSDA$loadings$X)
))
results = results %>%
mutate(belong_to = ifelse(Biomarker %in% groups_fran[1:8], "Liver",
ifelse(Biomarker %in% groups_fran[9:18], "Metabolic",
ifelse(Biomarker %in% groups_fran[19:20], "Immune",
ifelse(Biomarker %in% groups_fran[21:25], "Endocrine",
"Kidney")))))
colnames(results)[3] = 'Loadings'
results$minLoad = as.numeric(sapply(as.vector(results$Loadings), function(x) min(0, x)))
results$maxLoad = as.numeric(sapply(as.vector(results$Loadings), function(x) max(0, x)))
PLSDA_loadings = results %>% ggplot(aes(x = Biomarker, y = 0, ymin = minLoad,
ymax = maxLoad, color = Model))+
geom_linerange(stat = "identity", position = position_dodge(0.9))+
geom_point(aes(y = 0), position = position_dodge(0.9)) +
ylab("Loading coefficients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_color_brewer(palette = "Set1") +
facet_grid(cols = vars(belong_to), scales = "free", space = "free_x")
PLSDA_loadings
bio.icd <- merge(bio, cov['cvd_final_icd10'], by='row.names')
X = as.data.frame(bio.icd)
y = bio.cov$CVD_status
#Create the stratified datasets
for (subtype in c("G454", "G459", "I200", "I209", "I210", "I211", "I214",
"I219", "I249", "I251", "I259", "I635", "I639", "I64")) {
Xtemp = X[X$cvd_final_icd10 %in% subtype, ]
Ytemp = y[X$cvd_final_icd10 %in% subtype]
assign(paste0("X_", subtype), Xtemp)
assign(paste0("Y_", subtype), Ytemp)
}
#Computing the misclassification rate by subtype of CVD, for the sPLS-DA and sgPLS-DA models
y_pred <- predict(sPLSDA, newdata = as.data.frame(bio))
fitted = y_pred$class$max.dist
table(fitted)
MSEP_sPLSDA = NULL
for (subtype in c("","G454","G459","I200","I209","I210","I211","I214",
"I219","I249","I251","I259","I635","I639","I64")) {
idx = which(cov$cvd_final_icd10 == subtype)
MSEP_sPLSDA[[subtype]] = 1 - sum(diag(table(y[idx],
y_pred$class$max.dist[idx])))/length(idx)
}
y_pred_g = predict(sgPLSDA, newdata = as.data.frame(bio))
fitted_g = y_pred_g$class$max.dist
MSEP_sgPLSDA = NULL
for (subtype in c("","G454","G459","I200","I209","I210","I211","I214",
"I219","I249","I251","I259","I635","I639","I64")) {
idx = which(cov$cvd_final_icd10 == subtype)
MSEP_sgPLSDA[[subtype]] = 1 - sum(diag(table(y[idx],
y_pred_g$class$max.dist[idx])))/length(idx)
}
mis_rate = data.frame(rbind(
cbind(Prediction=fitted, model="sPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status),
cbind(Prediction=fitted_g, model="sgPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status)))
levels(mis_rate$subtype) = c("G454","G459","I200","I209","I210","I211","I214",
"I219","I251","I259","I638","I639","I64","I679",
"Control")
mis_rate$subtype = replace(mis_rate$subtype, which(is.na(mis_rate$subtype)),
"Control")
mis_rate$CorrectClass = !(mis_rate$comp1 == mis_rate$truth)
mis_rate <- mis_rate %>% filter(subtype %in% c("Control","G454","G459","I200",
"I209","I210","I211","I214",
"I219","I249","I251","I259",
"I635","I639","I64")) %>%
group_by(subtype, model) %>%
summarise(rate = mean(CorrectClass)) %>%
arrange(subtype)
plsda_stratified <- mis_rate %>% ggplot(aes(x = subtype, ymin = 0, ymax = rate, color = model)) +
geom_linerange(stat = "identity", position = position_dodge(0.9)) +
scale_color_brewer(palette = "Set1") +
ylab("Misclassification Rate")
plsda_stratified
View(mis_rate)
mis_rate = data.frame(rbind(
cbind(Prediction=fitted, model="sPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status),
cbind(Prediction=fitted_g, model="sgPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status)))
levels(mis_rate$subtype) = c("G454","G459","I200","I209","I210","I211","I214",
"I219","I251","I259","I638","I639","I64","I679",
"Control")
mis_rate$subtype = replace(mis_rate$subtype, which(is.na(mis_rate$subtype)),
"Control")
mis_rate$CorrectClass = !(mis_rate$comp1 == mis_rate$truth)
mis_rate$CorrectClass = (mis_rate$comp1 == mis_rate$truth)
mis_rate_plot <- mis_rate %>% filter(subtype %in% c("Control","G454","G459",
"I200","I209","I210","I211","I214","I219","I249",
"I251","I259","I635","I639","I64")) %>%
group_by(subtype, model) %>%
summarise(rate = mean(CorrectClass)) %>%
arrange(subtype)
View(mis_rate_plot)
plsda_stratified <- mis_rate %>% ggplot(aes(x = subtype, ymin = 0, ymax = rate, color = model)) +
geom_linerange(stat = "identity", position = position_dodge(0.9)) +
scale_color_brewer(palette = "Set1") +
ylab("Misclassification Rate")
plsda_stratified
plsda_stratified <- mis_rate_plot %>% ggplot(aes(x = subtype, ymin = 0, ymax = rate, color = model)) +
geom_linerange(stat = "identity", position = position_dodge(0.9)) +
scale_color_brewer(palette = "Set1") +
ylab("Misclassification Rate")
plsda_stratified
mis_rate_plot <- mis_rate %>% filter(subtype %in% c("Control","G454","G459",
"I200","I209","I210","I211","I214","I219","I249",
"I251","I259","I635","I639","I64")) %>%
group_by(subtype, model) %>%
summarise(rate = mean(CorrectClass)) %>%
arrange(subtype)
mis_rate = data.frame(rbind(
cbind(Prediction=fitted, model="sPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status),
cbind(Prediction=fitted_g, model="sgPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status)))
levels(mis_rate$subtype) = c("G454","G459","I200","I209","I210","I211","I214",
"I219","I251","I259","I638","I639","I64","I679",
"Control")
mis_rate$subtype = replace(mis_rate$subtype, which(is.na(mis_rate$subtype)),
"Control")
mis_rate$CorrectClass = (mis_rate$comp1 == mis_rate$truth)
mis_rate_plot <- mis_rate %>% filter(subtype %in% c("Control","G454","G459",
"I200","I209","I210","I211","I214","I219","I249",
"I251","I259","I635","I639","I64")) %>%
group_by(subtype, model) %>%
summarise(rate = mean(CorrectClass)) %>%
arrange(subtype)
mis_rate = data.frame(rbind(
cbind(Prediction=fitted, model="sPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status),
cbind(Prediction=fitted_g, model="sgPLSDA",
subtype = bio.icd$cvd_final_icd10, truth=bio.cov$CVD_status)))
levels(mis_rate$subtype) = c("G454","G459","I200","I209","I210","I211","I214",
"I219","I251","I259","I638","I639","I64","I679",
"Control")
mis_rate$subtype = replace(mis_rate$subtype, which(is.na(mis_rate$subtype)),
"Control")
mis_rate$IncorrectClass = !(mis_rate$comp1 == mis_rate$truth)
mis_rate_plot <- mis_rate %>% filter(subtype %in% c("Control","G454","G459",
"I200","I209","I210","I211","I214","I219","I249",
"I251","I259","I635","I639","I64")) %>%
group_by(subtype, model) %>%
summarise(rate = mean(CorrectClass)) %>%
arrange(subtype)
mis_rate_plot <- mis_rate %>% filter(subtype %in% c("Control","G454","G459",
"I200","I209","I210","I211","I214","I219","I249",
"I251","I259","I635","I639","I64")) %>%
group_by(subtype, model) %>%
summarise(rate = mean(InorrectClass)) %>%
arrange(subtype)
mis_rate_plot <- mis_rate %>% filter(subtype %in% c("Control","G454","G459",
"I200","I209","I210","I211","I214","I219","I249",
"I251","I259","I635","I639","I64")) %>%
group_by(subtype, model) %>%
summarise(rate = mean(IncorrectClass)) %>%
arrange(subtype)
plsda_stratified <- mis_rate_plot %>% ggplot(aes(x = subtype, ymin = 0, ymax = rate, color = model)) +
geom_linerange(stat = "identity", position = position_dodge(0.9)) +
scale_color_brewer(palette = "Set1") +
ylab("Misclassification Rate")
plsda_stratified
ggsave(paste0(save_plots,"PLSDA_stratified.pdf"), plot=PLSDA_loadings)
ggsave(paste0(save_plots,"PLSDA_stratified.pdf"), plot=plsda_stratified)
saveRDS(plsda_stratified,paste0(save_plots,"PLSDA_stratified.rds"))
ggsave(paste0(save_plots,"PLSDA_stratified.pdf"), plot=plsda_stratified)
ggsave(paste0(save_plots,"PLSDA_stratified.pdf"), plot=plsda_stratified)
plsda_stratified <- mis_rate_plot %>% ggplot(aes(x = subtype, ymin = 0, ymax = rate, color = model)) +
geom_linerange(stat = "identity", position = position_dodge(0.9)) +
scale_color_brewer(palette = "Set1") +
ylab("Misclassification Rate")
ggsave(paste0(save_plots,"PLSDA_stratified.pdf"), plot=plsda_stratified)
ggsave(paste0(save_plots,"PLSDA_loadings.pdf"), plot=PLSDA_loadings)
results = data.frame(rbind(
cbind(Biomarker = colnames(bio),
Model = 'sPLSDA',
Loadings = sPLSDA$loadings$X),
cbind(Biomarker = colnames(bio),
Model = 'sgPLSDA',
Loadings = sgPLSDA$loadings$X)
))
results = results %>%
mutate(belong_to = ifelse(Biomarker %in% groups_fran[1:8], "Liver",
ifelse(Biomarker %in% groups_fran[9:18], "Metabolic",
ifelse(Biomarker %in% groups_fran[19:20], "Immune",
ifelse(Biomarker %in% groups_fran[21:25], "Endocrine",
"Kidney")))))
colnames(results)[3] = 'Loadings'
results$minLoad = as.numeric(sapply(as.vector(results$Loadings), function(x) min(0, x)))
results$maxLoad = as.numeric(sapply(as.vector(results$Loadings), function(x) max(0, x)))
PLSDA_loadings = results %>% ggplot(aes(x = Biomarker, y = 0, ymin = minLoad,
ymax = maxLoad, color = Model))+
geom_linerange(stat = "identity", position = position_dodge(0.9))+
geom_point(aes(y = 0), position = position_dodge(0.9)) +
ylab("Loading coefficients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_color_brewer(palette = "Set1") +
facet_grid(cols = vars(belong_to), scales = "free", space = "free_x")
ggsave(paste0(save_plots,"PLSDA_loadings.pdf"), plot=PLSDA_loadings)
PLSDA_loadings = results %>% ggplot(aes(x = Biomarker, y = 0, ymin = minLoad,
ymax = maxLoad, color = Model))+
geom_linerange(stat = "identity", position = position_dodge(0.9))+
geom_point(aes(y = 0), position = position_dodge(0.9)) +
ylab("Loading coefficients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_color_brewer(palette = "Set1") +
facet_grid(cols = vars(belong_to), scales = "free", space = "free_x")
plsda_loadings
PLSDA_loadings
ggsave(paste0(save_plots,"PLSDA_loadings.pdf"), plot=PLSDA_loadings)
ggsave(paste0(save_plots,"PLSDA_loadings.pdf"), plot=PLSDA_loadings)
PLSDA_loadings = results %>% ggplot(aes(x = Biomarker, y = 0, ymin = minLoad,
ymax = maxLoad, color = Model))+
geom_linerange(stat = "identity", position = position_dodge(0.9))+
geom_point(aes(y = 0), position = position_dodge(0.9)) +
ylab("Loading coefficients") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_color_brewer(palette = "Set1") +
facet_grid(cols = vars(belong_to), scales = "free", space = "free_x")
ggsave(paste0(save_plots,"PLSDA_loadings.pdf"), plot=PLSDA_loadings)
