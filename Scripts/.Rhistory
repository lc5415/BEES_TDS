## running this heavy thing sequentially
t0 = Sys.time()
num_of_trans = unlist(lapply(colnames(proteins),lassoSequence))
print(Sys.time()-t0)
tr_per_prot = data.frame(NumberOfTranscripts = num_of_trans,
protein = colnames(proteins))
ggplot(tr_per_prot, aes(x = reorder(protein, -NumberOfTranscripts), y = NumberOfTranscripts))+geom_col()+theme(axis.text.x = element_text(angle = 90, hjust = 1))
# when using FORK variable can be exported from computer to Cluster
cl = makeCluster(detectCores()-1, type = "FORK")
t0 = Sys.time()
tr_per_prot = data.frame(NumberOfTranscripts = unlist(
parLapply(cl = cl,colnames(proteins),
function(x) lassoSequence(x, "lambda.min"))),
protein = colnames(proteins))
stopCluster(cl)
print(Sys.time()-t0)
ggplot(tr_per_prot, aes(x = reorder(protein, -NumberOfTranscripts), y = NumberOfTranscripts))+geom_col()+theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(tr_per_prot, aes(x = reorder(protein, -NumberOfTranscripts), y = NumberOfTranscripts))+geom_col()+theme(axis.text.x = element_text(angle = 90, hjust = 1))
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/kNNImputeOptimization.R', echo=TRUE)
###########################################################################
###########################################################################
###                                                                     ###
###                         PACKAGE DECLARATION                         ###
###                                                                     ###
###########################################################################
###########################################################################
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
if (!require(devtools)) install.packages('devtools')
library(devtools)
if (!require(remotes)) install.packages('remotes')
library(remotes)
if (!require(ggbiplot)) install_github("vqv/ggbiplot")
library(ggbiplot)
if (!require(GGally)) install_github("GGally")
library(GGally)
if (!require(tidyverse)) install.packagaes("tidyverse")
library(tidyverse)
if (!require(naniar)) install.packages("naniar")
library(naniar)
if (!require(factoextra)) install.packages("factoextra")
library(factoextra)
if (!require(ggfortify)) install.packages("ggfortify")
library(ggfortify)
if (!require(stats)) install.packages("stats")
library(stats)
if (!require(mice)) install.packages('mice')
library(mice)
if (!require(DMwR)) install.packages('DMwR')
library(DMwR)
if (!require(impute)) BiocManager::install("impute")
library(impute)
library(parallel)
cores = detectCores()
############################################################################
############################################################################
###                                                                      ###
###                             DATA LOADING                             ###
###                                                                      ###
############################################################################
############################################################################
#################################################################
##                      Original datasets                      ##
#################################################################
cov.original = readRDS("../data/Covars_toy.rds")
bio.original= readRDS("../data/Biomarkers_toy.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../data/Genes_toy.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
##################################################################
##                        Cluster add-in                        ##
##################################################################
cluster = 0
if (cluster == 1){
cov.original = readRDS("../FULLDATA/Covariates.rds")
bio.original= readRDS("../FULLDATA/Biomarkers_full.rds")
bio.dict = readxl::read_xlsx("../Biomarker_annotation.xlsx")
cov.dict = readxl::read_xlsx("../Covariate_dictionary.xlsx")
snp.original = readRDS('../FULLDATA/genetic_data_cvd_snps.rds')
snp_info.original = readxl::read_xlsx("../SNP_info.xlsx")
rownames(bio.original) = bio.original$`mydata$eid`
bio.original = bio.original[,-1]
}
##################################################################
##################################################################
##              Changing biomarkers codes by names              ##
##################################################################
#make nicely looking names (programmingly functional)
colnames(bio.dict) = make.names(colnames(bio.dict), unique=TRUE)
#get column numbers of columns with name containing pattern *(.)1(.)*
# use (.) to match the dot as opposed to using . as a wildcard
bio = bio.original[,!grepl("*(.)1(.)0", colnames(bio.original))]
# Match code with biomarker name to change column names of b
# get element 2 to 6 of all string in vector colnames(b)
# the match() function, match the substring from colnames to
# the UK.biobank.field in the biomarkers dictionary,
# effectively ordering the colnames of b
# Alternative: order UK.bionbank.field entries and match them
#---- bio.dict = bio.dict %>% arrange(UK.Biobank.Field)
colnames(bio) = bio.dict$Biomarker.name[
match(substring(colnames(bio),2,6),bio.dict$UK.Biobank.Field)]
colnames(bio) = make.names(colnames(bio), unique=TRUE)
colnames(bio) = sub("\\.\\.",".", colnames(bio))
# safety-check for all vars being numeric
stopifnot(all(apply(bio, 2, is.numeric)))
##################################################################
##               Processing of covariates dataset               ##
##################################################################
## preprocessing c
# replace empty strings by NA
values_to_replace_w_na = c("")
cov = cov.original %>% replace_with_na_all(condition = ~.x %in%
values_to_replace_w_na)
#remove anything to do wih cancer or external deaths
cov = cov[,!grepl("cancer|external", colnames(cov))]
#remove codes except for icd10
cov = cov[,!(colnames(cov) %in% c("cvd_final_icd9",
"cvd_final_nc_illness_code",
"cvd_final_opcs4",
"cvd_final_ukb_oper_code",
"other_cause_death"))]
# change numerical binary outcome variables to categorical
str(cov)
cov$CVD_status = as.factor(cov$CVD_status)
cov$vit_status = as.factor(cov$vit_status)
cov$dc_cvd_st = as.factor(cov$dc_cvd_st)
cov$cvd_death = as.factor(cov$cvd_death)
saveRDS(cov, file = "../data/preprocessed/covProcessed.rds")
##################################################################
##                   Processing of biomarkers                   ##
##################################################################
saveRDS(bio, file = "../data/preprocessed/bioUnfiltered.rds")
# drop columns with more than 50% missing values i.e. Rheumatoid factor
# and oestradiol
bio = bio[,!colMeans(is.na(bio))>0.5]
# drop rows with more than 50% biomarkers missing
bio = bio[!rowMeans(is.na(bio))>0.5,]
saveRDS(bio, file = "../data/preprocessed/bioProcessed.rds")
bioMCAR = bio[complete.cases(bio),]
saveRDS(bioMCAR, file = "../data/preprocessed/bioMCAR.rds")
# impute biomarkers based on biomarkers only
# t0 = Sys.time()
# imp.model = mice(bio, m=5, maxit = 10,
#                  seed = 500, printFlag = F)
# print(Sys.time() - t0) # takes about 1 minute
#
# # Impute with parallelisation
# t0 = Sys.time()
# imp.model = parlmice(bio,  m =5, seed = NA, printFlag = F,
#                      cl.type = "FORK")
# print(Sys.time() - t0) # takes about 1 minute
# here we assign the imputed data to bio.imp
#bio.imp = complete(imp.model,2)
# Impute with KNN -- using caret
t0 = Sys.time()
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x, perParam = T, scaled = T)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x, perParam = T, scaled = T)))
5%5
?modulo
5%%5
MSEperParam
debugSource('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/kNNImputeOptimization.R', echo=TRUE)
kNNImputeOptimization(bio, seed = 1,
perParam = T, scaled = T)
View(MSEperParam)
View(MSEperParam)
print(colMeans(MSEperParam))
MSEperParam$k = 1:50
# dataframe with
MSEperParam = data.frame(sqrt(MSEperParam))
# substracting predicted dataframe from original ones (all non
# inferreed values with cancel out) square and then take colmeans
# then plot.
MSEperParam = t(sapply(1:length(predictions.k),function(L){
# mean of vector of squared differences between vector and original data
colMeans((predictions.k.rescaled[[L]]-data.complete.scaled)**2)
}))
# dataframe with
MSEperParam = data.frame(sqrt(MSEperParam))
MSEperParam$k = 1:50
# could further implement to concatenate the
# per param results for several iterations,
# though it's pretty infromative at the moment
print(MSEperParam %>% pivot_longer(-k) %>%
ggplot(aes(x = k, y = value))+
facet_wrap(~name)+geom_point())
source("kNNImputeOptimization.R",print.eval = T)
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = !(x%%5))))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = !(x%%5))))
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
boxplot(RMSE)
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
boxplot(RMSE)
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
boxplot(RMSE)
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
debugSource('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/kNNImputeOptimization.R', echo=TRUE)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
debugSource('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/kNNImputeOptimization.R', echo=TRUE)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
boxplot(RMSE)
colMeans(is.na(bio))
debugSource('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/kNNImputeOptimization.R', echo=TRUE)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>% mutate(AmountNA = colMeans(is.na(data.scaled)))
data.scaled
colMeans(is.na(data.scaled))
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>% mutate(AmountNA = colMeans(is.na(data.scaled)))
MSEperParam %>% pivot_longer(-k) %>%
group_by(name)
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value))
colMeans(is.na(data.scaled))
colMeans(is.na(data.scaled))[colMeans(is.na(data.scaled))==0]
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value))
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>% mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE))
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>% mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>% mutate(AmountNA = colMeans(is.na(data.scaled)))
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, color = name))+
geom_point()
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point())
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point()+geom_text(aes(label = name), hjust = 0, vjust = 0))
colMeans(bio)
colMeans(data.scaled)
colMeans(is.na(data.scaled))
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point()+geom_text(aes(label = name), hjust = 0, vjust = 0)
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))
dat = MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))
data()
dat
View(dat)
colnames(data.scaled)
reorder(colnames(data.scaled))
arrange(colnames(data.scaled))
sort(colnames(data.scaled))
data.scaled[,sort(colnames(data.scaled))]
# sort data.scaled in right order
data.scaled = data.scaled[,sort(colnames(data.scaled))]
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point()+geom_text(aes(label = name), hjust = 0, vjust = 0))
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point()+geom_text(aes(label = name)))
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point()+geom_text(aes(label = name), hjust = 0, vjust = 0))
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point()+geom_text(aes(label = name), hjust = 0, vjust = 0)+
ylim(0,3)+xlim(0,0.4))
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = AmountNA, y = RMSE, label = name))+
geom_point()+geom_text(aes(label = name), hjust = 0, vjust = 0)+
ylim(0,2.5)+xlim(0,0.3))
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+coord_flip())
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+geom_text(aes(label = AmountNA))+coord_flip())
MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+geom_text(aes(label = round(AmountNA,2)))+coord_flip()
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(label = round(AmountNA,2)), hjust = 1)+
coord_flip())
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(label = round(AmountNA,2)), hjust = 1,
color = "white")+
coord_flip())
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(label = round(AmountNA,2)), hjust = 1.2,
color = "white")+
coord_flip())
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(
label = paste0(as.character(round(AmountNA,2)*100),
"%"), hjust = 1.2,
color = "white")+
coord_flip()))
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(
label = paste0(as.character(round(AmountNA,2)*100),
"%"), hjust = 1.2,
color = "white"))+
coord_flip())
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(
label = paste0(as.character(round(AmountNA,2)*100),
"%"), hjust = 1.2))+
coord_flip())
# sort data.scaled in right order
data.scaled = data.scaled[,sort(colnames(data.scaled))]
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(
label = paste0(as.character(round(AmountNA,2)*100),
"%"), hjust = 1.2))+
coord_flip())
colMeans(is.na(data.scaled))
print(MSEperParam %>% pivot_longer(-k) %>%
group_by(name) %>% summarise(RMSE = mean(value)) %>%
mutate(RMSE = ifelse(is.na(RMSE), 0, RMSE)) %>%
mutate(AmountNA = colMeans(is.na(data.scaled)))%>%
ggplot(aes(x = reorder(name, RMSE), y = RMSE))+
geom_col()+
geom_text(aes(
label = paste0(as.character(round(AmountNA,4)*100),
"%"), hjust = 1.2))+
coord_flip())
source('~/OneDrive - Imperial College London/MScHDA/Term2/TDS/Project/Scripts/kNNImputeOptimization.R', echo=TRUE)
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
source("kNNImputeOptimization.R",print.eval = T)
RMSE = t(sapply(1:5,
function(x) kNNImputeOptimization(bio, seed = x,
perParam = T, scaled = T,
plot = x==5)))
